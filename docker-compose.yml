version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: lg_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin@123
      POSTGRES_DB: commodity_tracker
    ports:
      - "5432:5432"
    networks:
      - kg_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d commodity_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: lg_zookeeper
    ports:
      - "2181:2181"
    networks:
      - kg_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

      restart: unless-stopped

  kafka:
    image: wurstmeister/kafka:latest 
    container_name: lg_kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - kg_network
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "user-events:1:1,commodity-events:1:1"
      KAFKA_MESSAGE_MAX_BYTES: 200000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 200000000
      KAFKA_MAX_REQUEST_SIZE: 200000000
      KAFKA_REPLICATION_FACTOR: 1
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_DELETE_TOPIC_ENABLE: "false"
      

    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    # //Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    ports:
      - "8085:8080"
    depends_on:
      - kafka
    networks:
      - kg_network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

  backend:
    build: .
    container_name: lg_backend
    ports:
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - kg_network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/commodity_tracker
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin@123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

networks:
  kg_network:
    name: kg_network  
    driver: bridge

volumes:
  postgres_data: